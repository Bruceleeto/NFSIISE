#!/usr/bin/env bash

function compile_x86
{
	CPU_FLAGS='-mno-sse2 -mno-sse -mno-mmx'
	COMMON_FLAGS='-Wall -m32 -std=gnu89'

	echo -n "Building"
	if [[ $1 == "debug" ]]; then
		shift
		echo -n " debug"
		WIN_SUBSYSTEM='console'
		DEBUG_ASM='-g dwarf2'
		C_FLAGS="$COMMON_FLAGS -g $CPU_FLAGS"
	else
		echo -n " release"
		WIN_SUBSYSTEM='windows'
		C_FLAGS="$COMMON_FLAGS -O2 $CPU_FLAGS"
		STRIP='-s'
	fi

	echo -n " for"
	if [[ $1 == "win32" ]]; then
		echo -n " Windows... "
		i686-w64-mingw32-windres Windows/nfs2se.rc icon.o &&
		i686-w64-mingw32-gcc $C_FLAGS -DOPENGL1X -c *.c &&
		yasm -f win32 Asm/NFS2SE.asm -o NFS2SE.Win32.o $DEBUG_ASM --prefix=_ &&
		i686-w64-mingw32-ld --enable-stdcall-fixup -o "../Need For Speed II SE/nfs2se.exe" *.o --stack=0x7D00,0x7D00 --heap=0x2000,0x1000 -lws2_32 -lwinmm -lkernel32 -lmingwex -lmsvcrt -lopengl32 -lSDL2 -subsystem=$WIN_SUBSYSTEM $STRIP -e _start &&
		rm -f *.o &&
		echo "OK!"
	else
		OS=$(uname)
		if [ $OS == "Linux" ]; then
			if [ -z $CC ]; then
				CC=gcc
			fi
			echo -n " $OS ($CC)... "
			#32bit libraries for Linux
			if [ -z $LIB32_DIR ]; then
				LIB32_DIR=/usr/lib
				if [[ -d /usr/lib32 ]]; then
					LIB32_DIR=/usr/lib32
				fi
			fi
			$CC $C_FLAGS -DSTACK_REALIGN -DOPENGL1X -c *.c &&
			yasm -f elf32 Asm/NFS2SE.asm -o NFS2SE.Linux.o $DEBUG_ASM &&
			ld -m elf_i386 -dynamic-linker /lib/ld-linux.so.2 -o "../Need For Speed II SE/nfs2se" *.o -L$LIB32_DIR -lc -lSDL2 -lGL $STRIP -rpath=\$ORIGIN -e start &&
			rm -f *.o &&
			echo "OK!"
		elif [ $OS == "Darwin" ]; then
			echo -n " OS X... "
			clang $C_FLAGS -DSTACK_REALIGN -DSWAP_WINDOW_AND_GL_THREAD -c *.c &&
			yasm -f macho Asm/NFS2SE.asm -o NFS2SE.OSX.o --prefix=_ -DSWAP_WINDOW_AND_GL_THREAD &&
			ld -o "../Need For Speed II SE/nfs2se" *.o -lc -lSDL2 -framework OpenGL -macosx_version_min 10.6 -e _start &&
			rm -f *.o &&
			echo "OK!"
		elif [ $OS == "FreeBSD" ]; then
			#NOT TESTED!!!
			echo -n " $OS... "
			clang $C_FLAGS -DSTACK_REALIGN -c -I/usr/local/include *.c &&
			yasm -f elf32 Asm/NFS2SE.asm -o NFS2SE.Linux.o $DEBUG_ASM &&
			ld -m elf_i386_fbsd -dynamic-linker /libexec/ld-elf32.so.1 -o "../Need For Speed II SE/nfs2se" *.o -L/usr/local/lib32/compat -lc -lSDL2 -lGL $STRIP -rpath=\$ORIGIN -e start &&
			rm -f *.o &&
			echo "OK!"
		fi
	fi
}

function compile_cpp
{
	if [ $(uname -m) == "x86_64" ]; then
		CPU_FLAGS="-m32"
	fi

	echo "Compiling C++ translation. It can take a long time and consume a lot of memory!"

	if [[ $1 == "debug" ]]; then
		FLAGS="-O0 -g"
		echo "Compiling debug..."
	else
		FLAGS="-Ofast -flto -s -march=native -DNDEBUG"
		echo "Compiling release..."
	fi

	time gcc -o "../Need For Speed II SE/nfs2se" -std=c++14 $CPU_FLAGS $FLAGS -DGLES2 -DNFS_CPP -w *.c Cpp/NFS2SE.cpp -lSDL2 -lGL -lm -fpermissive -fno-rtti -fno-exceptions
}

cd src || exit 1
if [[ $1 == "cpp" ]]; then
	shift
	compile_cpp $@
elif [[ $1 == "android" ]]; then
	VERSION=`grep WRAPPER_VERSION Version | cut -c26-30 | grep "\."`
	echo "Wrapper version: $VERSION"
	cd Android || exit 1
	sed "s/@VERSION@/$VERSION/" AndroidManifest.xml.in > AndroidManifest.xml
	$ANDROID_NDK_ROOT/ndk-build || exit 1
	$ANDROID_HOME/tools/android update project -p . -t android-12 --subprojects || exit 1
	ant debug || exit 1
	shift
	if [[ $1 == "install" ]]; then
		adb install -r bin/NFSIISE-debug.apk || exit 1
		sleep 0.25
		adb shell am start -n org.zaps166.NFSIISE/org.zaps166.NFSIISE.NFSIISE
	fi
else
	compile_x86 $@
fi
